name: Create GitHub release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: read

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          latest=$(git tag --sort=-v:refname | head -n 1)
          echo "latest_tag=$latest" >> $GITHUB_OUTPUT

      - name: Get last merged PR labels
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              sort: 'updated',
              direction: 'desc',
              per_page: 5
            });

            const merged = prs.data.find(pr => pr.merged_at);
            const labels = merged?.labels?.map(l => l.name) || [];
            core.setOutput('labels', labels.join(','));
            core.setOutput('label_major', labels.includes('major'));
            core.setOutput('label_minor', labels.includes('minor'));
            core.setOutput('label_patch', labels.includes('patch'));

      - name: Determine next version
        id: bump
        run: |
          latest="${{ steps.get_tag.outputs.latest_tag }}"
          if [[ -z "$latest" ]]; then
            echo "next_tag=v1.0.0" >> $GITHUB_OUTPUT
            exit 0
          fi

          IFS='.' read -r major minor patch <<<"${latest#v}"

          if [[ "${{ steps.pr.outputs.label_major }}" == "true" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [[ "${{ steps.pr.outputs.label_minor }}" == "true" ]]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          echo "next_tag=v$major.$minor.$patch" >> $GITHUB_OUTPUT

      - name: Update package.json with new version
        run: |
          next_tag="${{ steps.bump.outputs.next_tag }}"
          version="${next_tag#v}"
          jq --arg new_version "$version" '.version = $new_version' package.json > package.json.tmp && mv package.json.tmp package.json
          echo "Updated package.json version to $version"

      - name: Install dependencies and update package-lock.json
        run: |
          npm install

      - name: Commit version bump and package-lock.json
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add package.json package-lock.json
          git commit -m "Bump version to ${{ steps.bump.outputs.next_tag }} and update package-lock.json"
          git push origin main

      - name: Generate changelog
        id: changelog
        run: |
          latest="${{ steps.get_tag.outputs.latest_tag }}"
          if [[ -n "$latest" ]]; then
            log=$(git log "$latest"..HEAD --pretty=format:"- %s")
          else
            log=$(git log --pretty=format:"- %s")
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$log" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.bump.outputs.next_tag }}
          name: Release ${{ steps.bump.outputs.next_tag }}
          body: ${{ steps.changelog.outputs.changelog }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build the site for production
        run: |
          npm ci
          npm run build
        env:
          ELEVENTY_PATH_PREFIX: "/"

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages
          destination_dir: .
