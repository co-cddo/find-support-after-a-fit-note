name: Create GitHub release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          latest=$(git tag --sort=-v:refname | head -n 1)
          echo "latest_tag=$latest" >> $GITHUB_OUTPUT

      - name: Bump patch version
        id: bump
        run: |
          latest="${{ steps.get_tag.outputs.latest_tag }}"
          if [[ -z "$latest" ]]; then
            echo "next_tag=v1.0.0" >> $GITHUB_OUTPUT
          else
            IFS='.' read -r major minor patch <<<"${latest#v}"
            patch=$((patch + 1))
            echo "next_tag=v$major.$minor.$patch" >> $GITHUB_OUTPUT
          fi

      - name: Update package.json with new version
        run: |
          next_tag="${{ steps.bump.outputs.next_tag }}"
          jq --arg new_version "$next_tag" '.version = $new_version' package.json > package.json.tmp && mv package.json.tmp package.json
          echo "Updated package.json version to $next_tag"

      - name: Install dependencies and update package-lock.json
        run: |
          npm install  # This updates package-lock.json

      - name: Commit version bump and package-lock.json
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add package.json package-lock.json  # Add both package.json and package-lock.json
          git commit -m "Bump version to ${{ steps.bump.outputs.next_tag }} and update package-lock.json"
          git push origin main

      - name: Generate changelog
        id: changelog
        run: |
          latest="${{ steps.get_tag.outputs.latest_tag }}"
          if [[ -n "$latest" ]]; then
            log=$(git log "$latest"..HEAD --pretty=format:"- %s")
          else
            log=$(git log --pretty=format:"- %s")
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$log" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.bump.outputs.next_tag }}
          name: Release ${{ steps.bump.outputs.next_tag }}
          body: ${{ steps.changelog.outputs.changelog }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build the site for production
        run: |
          npm ci
          npm run build
        env:
          ELEVENTY_PATH_PREFIX: "/find-support-after-a-fit-note/"

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages
          destination_dir: .
